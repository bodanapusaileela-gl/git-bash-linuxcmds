To initialize a Git repository, use git init. To clone a repository, use git clone <repository-url>. Check the status of your repository with git status. Add changes to the staging area using git add <file-name> or git add . to add all changes. Commit changes with git commit -m "commit message". View the commit history using git log.

For branching and merging, create a new branch with git branch <branch-name>, switch to a different branch with git checkout <branch-name>, and create and switch to a new branch with git checkout -b <branch-name>. Merge a branch into the current branch using git merge <branch-name>.

For remote repositories, add a remote repository with git remote add <remote-name> <repository-url>, fetch changes from a remote repository using git fetch <remote-name>, pull changes with git pull <remote-name> <branch-name>, and push changes using git push <remote-name> <branch-name>.

For additional tasks, stash changes using git stash, apply stashed changes with git stash apply, delete a branch using git branch -d <branch-name>, revert a commit with git revert <commit-hash>, and reset to a previous commit with git reset --hard <commit-hash>.

To view differences, use git diff <commit-hash1> <commit-hash2> to view differences between commits, and git diff to view differences between the working directory and the staging area
The git cherry-pick command is used to apply changes from a specific commit to your current branch. First, find the commit hash using git log. Then, execute git cherry-pick <commit-hash> to apply the changes from that commit. If conflicts arise, resolve them manually, stage the resolved files with git add, and continue the cherry-pick process using git cherry-pick --continue. If you decide to abort the operation, use git cherry-pick --abort. To cherry-pick multiple commits, specify a range with git cherry-pick <start-commit-hash>^..<end-commit-hash>. This allows you to selectively integrate changes from one branch to another
git fetch :To use git fetch, navigate to your local repository and run git fetch origin to update your local copy with changes from the remote repository without merging them into your current branch. This command retrieves new commits from the remote repository, which you can view using git log origin/main. If you want to incorporate these fetched changes into your current branch, use git merge origin/main or git rebase origin/main. This allows you to keep your local repository up-to-date with the remote repository's changes without immediate merging.
      git fetch updates your local repository with changes from the remote repository without merging them into your current branch, allowing you to review the changes before integrating them. To fetch updates, use git fetch origin, which retrieves the latest changes from the remote repository. You can view the fetched changes with git log origin/main to see the commit history of the remote main branch. To merge these changes into your current branch, use git merge origin/main. Alternatively, you can reapply your current branchâ€™s commits on top of the fetched changes with git rebase origin/main. For example, you would first navigate to your project directory with cd my-project, fetch updates using git fetch origin, check the updates with git log origin/main, and then merge them with git merge origin/main.



